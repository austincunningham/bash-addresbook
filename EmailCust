#!/bin/bash
# Author : Austin Cunningham student id:20073379
#Email a customers from the file CustomerDetails 
#Enter a customer email address to email
# ANSI colour an formats moved to more readable variables names, can change echo colours
# the NONE is to turn off the format, echo -e enables the colour, may not use all of these
NONE='\033[00m'
RED='\033[01;31m'
GREEN='\033[01;32m'
YELLOW='\033[01;33m'
BLUE='\033[01;34m'
PURPLE='\033[01;35m'
CYAN='\033[01;36m'
WHITE='\033[01;37m'
BOLD='\033[1m'
UNDERLINE='\033[4m'
# check to see if CustomerDetails exists and contains a valid email address if not then redirect to AddCust to create it 
# regex is explained further down on this page
clear
if grep -q "Address" CustomerDetails 
	then 
	echo -e ${YELLOW}CustomerDetails already exits${NONE} 
	sleep 1
    clear
else
	echo
	echo -e ${YELLOW}"Creating blank CustomerDetails file"${NONE}
	printf "\n%-30s %-8s %-8s %-20s %s" "<E-mail Address>" "<Name>" "<Alias>" "<Address>" "<Telephone Number>" >> CustomerDetails
	sleep 1
	clear
fi


echo
echo -e ${RED}________________________________________________________________________${NONE} 
echo -e "${RED} _____                 _ _  ____          _                            ${NONE}"
echo -e "${RED}| ____|_ __ ___   __ _(_) |/ ___|   _ ___| |_ ___  _ __ ___   ___ _ __ ${NONE}"
echo -e "${RED}|  _| | '_ ' _ \ / _' | | | |  | | | / __| __/ _ \| '_ ' _ \ / _ \ '__|${NONE}"
echo -e "${RED}| |___| | | | | | (_| | | | |__| |_| \__ \ || (_) | | | | | |  __/ |   ${NONE}"
echo -e "${RED}|_____|_| |_| |_|\__,_|_|_|\____\__,_|___/\__\___/|_| |_| |_|\___|_|   ${NONE}"
echo -e ${RED}________________________________________________________________________${NONE} 
echo -e ${RED}________________________________________________________________________${NONE} 
echo
# the following if statement enclosed entire mail script , it checks to see if there is a valid email address in CustomerDetails
# if not it jumps to the end of the script
if grep -q -E -o "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b" CustomerDetails
	then
	################################################################################################################
	# grep searches for a string that matches email format in file CustomerDetails  and outputs to temp file       #
	# -E switch allows uses of extended regular expression ERE                                                     #
	# -o switch only prints non empty parts of the string found i.e. no spaces                                     #
	# the search string has 4 parts                                                                                #
	# [A-Za-z0-9._%+-] any of the following characters can make up the string beteen [],                           #
	# letter a to z in upper and lower case ,numbers 0 to 9 and the following special characters ._%+-             #
	# +@ at is added to the first string                                                                           #
	# second string is the same as the first but only the following special characters .- include                  #
	# +\. adds a dot to the end of the second string                                                               #
	# [A-Za-z] last string letter a to z in upper and lower case                                                   #
	# {n,m}  The  preceding  item  is  matched  at  least n times, but not more than m times.                      #
	# >> use standard output to a temp file                                                                        #
	# The symbol \b matches the empty string at the edge of a word , in this case at the beginning and the end     #
	################################################################################################################
	grep -E -o "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b" CustomerDetails >> temp
	# prompt user to see if they want to send a group mail
	echo -e ${RED}"Enter 'y' to send an email everyone"${NONE}
	echo -e ${RED}"Enter any other key to skip mass email "${NONE}
	# waiting for response at prompt and passing value to variable "everyone"
	read everyone
	# if statment to check to see if variable "everyone" is set to y-Y, if yes proceed with mass email send to all customer
	# if not go to else statment which search for an individual email address and sends to that email address 
	if [[ $everyone = "y" || $everyone = "Y" ]]
		then
		# prompt and wait for responce for subject and message body
		echo -e ${RED}"Subject:"${NONE}
		read Subject
		# -z checks for blank input, while will continue to check if input blank, the same checks are applied to Message
		while [ -z "$Subject" ]
	    do  
	        echo 
		    echo -e ${RED}"Invalid input blank spaces are not accepted"${NONE}
			echo
			echo -e ${RED}"Subject:"${NONE}
			read Subject
		done
		echo -e ${RED}Message body:${NONE}
		read Message
		while [ -z "$Message" ]
	    do  
	        echo 
		    echo -e ${RED}"Invalid input blank spaces are not accepted"${NONE}
			echo
			echo -e ${RED}"Message:"${NONE}
			read Message
		done
		# echo the message and pipe it to the mailx command -s is the subject switch and 
		# then you put in the email address in this case we are pulling the mail address from the temp file
		# mailutils needs to be installed for this to work "sudo apt-get install mailutils"
		echo "$Message" | mailx -s "$Subject" $(<temp)
		# this echo is just to show that the command above has completed , it doesn't gurantee delivery
		echo -e ${RED}message sent${NONE}
	else	
		echo -e ${RED}Enter details of customer you wish to email:${NONE}
    	read details 
    	# -z checks for blank input , loop until something is entered for details
    	while [ -z "$details" ]
    	do  
        	echo 
	    	echo -e ${RED}"Invalid input blank spaces are not accepted"${NONE}
			echo
			echo -e ${RED}"Enter details of customer you wish to email: "${NONE}
			read details
		done
		# uses grep -c to get a number of matching searches for the string details in CustomerDetails then displays results
		count=`grep -c $details CustomerDetails`
    	echo
		echo -e ${RED}"There are "$count" contacts found matching your search"${NONE}
		echo
		echo -e ${RED}================================================================================${NONE}
		echo
		grep -i $details CustomerDetails
		echo
		echo -e ${RED}================================================================================${NONE}
		echo 
		# if count is greater that 1 , narrow down the search by asking the user for more exact details
		if [[ $count -gt 1 ]]
			then
	    	echo -e ${RED}"Enter details of email address to narrow the search"${NONE}
	    	read details
	    	# use -z again to check for blank input
	    	while [ -z "$details" ]
			do  
	    		echo 
				echo -e ${RED}"Invalid input blank spaces are not accepted"${NONE}
				echo
				echo -e ${RED}Enter the Name or Alias of the customer delete :${NONE}
				read details
			done
			echo
			# new grep search on new input
			echo -e ${RED}"Refined search results"${NONE}
			echo
			echo -e ${RED}================================================================================${NONE}
			echo
			grep -i $details CustomerDetails
			echo
			echo -e ${RED}================================================================================${NONE}
		fi
		# search temp file (use temp as CustomerDetails has a header which awk would detect) 
		# for line contain details varable and let the first thing on that line equal Email
		Email=`grep -i "$details" temp | awk '{print $1}'`
		# write Email variable to file
		echo $Email > temp2
			# if Email is blank , displays message and lists CustomerDetails and asks for imput again
		    while [ -z "$Email" ] 
			do
				echo
				echo -e ${RED}"Contact not found "${NONE}
				echo
				# contacts listed by concating the file CustomerDetails
				echo -e ${RED}"List of contacts in the CustomerDetails file"${NONE}
				echo
				echo -e ${RED}================================================================================${NONE}
				cat CustomerDetails
				echo
				echo
				echo -e ${RED}================================================================================${NONE}
				echo
				echo
				echo -e ${RED}Enter exact email address of the customer you wish to email:${NONE}
				read details
				# -z checks for blank input
				while [ -z "$details" ]
	            do  
	    		    echo 
		    		echo -e ${RED}"Invalid input blank spaces are not accepted"${NONE}
					echo
					echo -e ${RED}"Enter details of customer you wish to email: "${NONE}
					read details
					echo are the details being pop $details
				done
				Email=`grep -i "$details" temp | awk '{print $1}'`
				echo $Email > temp2
			done
		echo	
		echo -e ${RED}"Email address : "${NONE} 
		echo $Email
		echo
		echo -e ${RED}"Subject:"${NONE}
		read Subject
		while [ -z "$Subject" ]
	    do  
	        echo 
		    echo -e ${RED}"Invalid input blank spaces are not accepted"${NONE}
			echo
			echo -e ${RED}"Subject:"${NONE}
			read Subject
		done
		echo -e ${RED}Message body:${NONE}
		read Message
		while [ -z "$Message" ]
	    do  
	        echo 
		    echo -e ${RED}"Invalid input blank spaces are not accepted"${NONE}
			echo
			echo -e ${RED}"Message:"${NONE}
			read Message
		done
		echo "$Message" | mailx -s "$Subject" $(<temp2)
		echo -e ${RED}message sent${NONE}
		# remove the temp file
	    rm temp temp2
    fi
else
	echo
	echo -e ${YELLOW}"CustomerDetails doesn't contain any valid email address"${NONE}
	echo -e ${YELLOW}"Recommend that you go to Add Customer to add some valid contacts"${NONE}
fi
echo
# return to the Menu, anything entered other that y-Y including blank spaces will go to the else option and end the script
# entering y-Y and you meet the if condition and call the script for Menu
echo -e "${RED}Enter 'y' to return to the Menu ${NONE}"
echo -e "${RED}Enter any other key to exit ${NONE}"
read yesno
if  [[ $yesno = "y" || $yesno = "Y" ]]
	then 
	  ./Menu
else
	echo Goodbye
	exit 113
fi